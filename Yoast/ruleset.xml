<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Yoast" namespace="YoastCS\Yoast" xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<description>Yoast Coding Standards</description>

	<!--
	#############################################################################
	SNIFF AGAINST THE WordPress RULESET
	Exclude a few select sniffs/errorcodes for specific reasons and
	add configuration for a sniff.
	#############################################################################
	-->
	<rule ref="WordPress">
		<!-- Set the minimum supported WP version for all sniff which use it in one go.
			 Ref: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#minimum-wp-version-to-check-for-usage-of-deprecated-functions-classes-and-function-parameters
		-->
		<properties>
			<property name="minimum_supported_version" value="4.9"/>
		</properties>

		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines"/>

		<!-- No need for this sniff as every Yoast travis script includes linting all files. -->
		<exclude name="Generic.PHP.Syntax"/>

		<!-- Excluded in favour of the YoastCS native "else on new line" sniff. -->
		<exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace"/>

		<!-- Excluded in favour of the YoastCS native Filename sniff. -->
		<exclude name="WordPress.Files.FileName"/>

		<!-- Excluded in favour of the YoastCS native FileComment sniff (which extends this sniff). -->
		<exclude name="Squiz.Commenting.FileComment"/>
		<!-- As the Yoast sniff extends the upstream sniff, we need to exclude the same error codes
			 as WPCS excludes in the Docs ruleset, but now for the Yoast sniff.
			 Once WPCS introduces a proper WP standards based FileComment sniff, the Yoast
			 sniff should extend that sniff instead of the PHPCS Squiz sniff and
			 these exclusions can then be removed. -->
		<exclude name="Yoast.Commenting.FileComment.IncorrectAuthor"/>
		<exclude name="Yoast.Commenting.FileComment.IncorrectCopyright"/>
		<exclude name="Yoast.Commenting.FileComment.MissingAuthorTag"/>
		<exclude name="Yoast.Commenting.FileComment.MissingSubpackageTag"/>
		<exclude name="Yoast.Commenting.FileComment.MissingCopyrightTag"/>
		<exclude name="Yoast.Commenting.FileComment.PackageTagOrder"/>
		<exclude name="Yoast.Commenting.FileComment.SubpackageTagOrder"/>
		<exclude name="Yoast.Commenting.FileComment.AuthorTagOrder"/>
		<exclude name="Yoast.Commenting.FileComment.CopyrightTagOrder"/>

		<!-- Demanding Yoda conditions is stupid. -->
		<exclude name="WordPress.PHP.YodaConditions"/>

		<!-- A while loop is the only valid control structure where an assignment can be justified. -->
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>

		<!-- If a conscious choice has been made for a non-strict comparison, that's ok.
			 I.e. when `strict` has been explicitely set to `false` in an array comparison,
			 it will be allowed. -->
		<exclude name="WordPress.PHP.StrictInArray.FoundNonStrictFalse"/>
	</rule>

	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<property name="exclude" type="array">
				<!-- Excluded in favour of the YoastCS native AlternativeFunctions sniff. -->
				<element value="json_encode"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<!-- No need to adjust alignment of large arrays when the item with the largest key is removed. -->
			<property name="exact" value="false"/>
			<!-- Don't align multi-line items if ALL items in the array are multi-line. -->
			<property name="alignMultilineItems" value="!=100"/>
			<!-- Array Assignment operator should always be on the same line as the array key. -->
			<property name="ignoreNewlines" value="false"/>
		</properties>
	</rule>

	<!-- Temporary work-around for upstream bug: squizlabs/PHP_CodeSniffer#2228 -->
	<rule ref="Yoast.Files.TestDoubles">
		<properties>
			<property name="doubles_path" type="array">
				<element value="/tests/doubles"/>
			</property>
		</properties>
	</rule>

	<!--
	#############################################################################
	SNIFF FOR PHP CROSS-VERSION COMPATIBILITY
	#############################################################################
	-->
	<config name="testVersion" value="5.2-"/>
	<rule ref="PHPCompatibilityWP">
		<include-pattern>*\.php$</include-pattern>
	</rule>


	<!--
	#############################################################################
	ADD SOME SPECIFIC EXTRA SNIFFS
	These may make it into WPCS at some point. If so, they can be removed here.
	#############################################################################
	-->
	<!-- Error prevention: Make sure the condition in a inline if declaration is bracketed. -->
	<rule ref="Squiz.ControlStructures.InlineIfDeclaration"/>

	<!-- Error prevention: Make sure arithmetics are bracketed. -->
	<rule ref="Squiz.Formatting.OperatorBracket.MissingBrackets"/>

	<!-- CS: no blank line between the content of a function and a function close brace.-->
	<rule ref="PSR2.Methods.FunctionClosingBrace"/>

	<!-- Error prevention: Ensure no git conflicts make it into the code base. -->
	<!-- PHPCS 3.4.0: This sniff will be added to WPCS 2.x in due time and can then be removed from this ruleset.
		 Related: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1500 -->
	<rule ref="Generic.VersionControl.GitMergeConflict"/>

	<!-- CS: no space between an increment/decrement operator and the variable it applies to. -->
	<!-- PHPCS 3.4.0: This sniff will be added to WPCS 2.x in due time and can then be removed from this ruleset.
		 Related: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1511 -->
	<rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

	<!-- QA: Function declarations should not contain parameters which will never be used. -->
	<!-- PHPCS 3.4.0: This sniff will be added to WPCS 2.x in due time and can then be removed from this ruleset.
		 Related: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1510 -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found"/>
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.FoundAfterLastUsed"/>

	<!-- ##### Documentation Sniffs vs empty index files ##### -->

	<!-- Exclude the 'empty' index files from some documentation checks -->
	<rule ref="Yoast.Commenting.FileComment">
		<exclude-pattern>*/index\.php</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.InlineComment.NoSpaceBefore">
		<exclude-pattern>*/index\.php</exclude-pattern>
	</rule>

</ruleset>
