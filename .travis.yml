language: php

dist: trusty

cache:
  apt: true
  directories:
    - .cache
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

php:
    - 5.4
    - 5.5
    - 5.6
    - 7.0
    - 7.1
    - 7.2
    - 7.3
    - 7.4

env:
  # Test against the highest/lowest supported PHPCS and WPCS versions.
  - PHPCS_BRANCH="dev-master" WPCS="dev-develop" PHPLINT=1
  - PHPCS_BRANCH="dev-master" WPCS="2.2.0"
  - PHPCS_BRANCH="3.5.0" WPCS="dev-develop"
  - PHPCS_BRANCH="3.5.0" WPCS="2.2.0"

# Define the stages used.
# For non-PRs, only the sniff, ruleset and quicktest stages are run.
# For pull requests and merges, the full script is run (skipping quicktest).
# Note: for pull requests, "develop" should be the base branch name.
# See: https://docs.travis-ci.com/user/conditions-v1
stages:
  - name: sniff
  - name: quicktest
    if: type = push AND branch NOT IN (master, develop)
  - name: test
    if: branch IN (master, develop)

matrix:
  fast_finish: true
  include:
    #### SNIFF STAGE ####
    - stage: sniff
      php: 7.3
      env: PHPCS_BRANCH="dev-master" WPCS="dev-master"
      addons:
        apt:
          packages:
            - libxml2-utils
      script:
        # Check the codestyle of the files within YoastCS.
        - composer check-cs

        # Validate the xml files.
        # @link http://xmlsoft.org/xmllint.html
        # For the build to properly error when validating against a scheme, these each have to be in their own condition.
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./Yoast/ruleset.xml
        - xmllint --noout ./Yoast/Docs/*/*Standard.xml

        # Check the code-style consistency of the xml files.
        - diff -B --tabsize=4 ./Yoast/ruleset.xml <(xmllint --format "./Yoast/ruleset.xml")

        # Check that the sniffs available are feature complete.
        - composer check-complete

    #### QUICK TEST STAGE ####
    # This is a much quicker test which only runs the unit tests and linting against low/high
    # supported PHP/PHPCS/WPCS combinations.
    - stage: quicktest
      php: 7.4
      env: PHPCS_BRANCH="dev-master" WPCS="dev-develop" PHPLINT=1
    - php: 7.4
      env: PHPCS_BRANCH="3.5.0" WPCS="2.2.0"
    - php: 5.4
      env: PHPCS_BRANCH="dev-master" WPCS="2.2.0" PHPLINT=1
    - php: 5.4
      env: PHPCS_BRANCH="3.5.0" WPCS="dev-develop"

before_install:
    # Speed up build time by disabling Xdebug.
    # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
    # https://twitter.com/kelunik/status/954242454676475904
    - phpenv config-rm xdebug.ini || echo 'No xdebug config.'

    # On stable PHPCS versions, allow for PHP deprecation notices.
    # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
    - |
      if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Sniff" && $PHPCS_BRANCH != "dev-master" && $WPCS != "dev-develop" ]]; then
        echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
      fi

    - export XMLLINT_INDENT="	"
    - export PHPCS_DIR=$(pwd)/vendor/squizlabs/php_codesniffer
    - export PHPCS_BIN=$(pwd)/vendor/bin/phpcs
    # Set the PHPCS version to test against.
    - composer require squizlabs/php_codesniffer:${PHPCS_BRANCH} --no-update --no-suggest --no-scripts
    # Set the WPCS version to test against.
    - composer require wp-coding-standards/wpcs:${WPCS} --no-update --no-suggest --no-scripts
    - |
      if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Sniff" ]]; then
          # For testing the YoastCS native sniffs, the rest of the packages aren't needed.
          composer remove phpcompatibility/phpcompatibility-wp phpcompatibility/php-compatibility --no-update
      fi
    - composer install --dev --no-suggest
    # The DealerDirect Composer plugin script takes care of the installed_paths.
    - $PHPCS_BIN -i

script:
    # Lint the PHP files against parse errors.
    - if [[ "$PHPLINT" == "1" ]]; then composer lint; fi

    # Run the unit tests.
    - vendor/bin/phpunit --filter Yoast --bootstrap="$PHPCS_DIR/tests/bootstrap.php" $PHPCS_DIR/tests/AllTests.php

    # Validate the composer.json file.
    # @link https://getcomposer.org/doc/03-cli.md#validate
    - if [[ "$PHPLINT" == "1" ]]; then composer validate --no-check-all --strict; fi
